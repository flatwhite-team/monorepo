// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String          @id @default(cuid())
  name            String
  address         String
  phoneNumber     String?
  latitude        Float
  longitude       Float
  description     String?         @db.Text
  images          Image[]
  menus           Menu[]
  businessDays    BusinessDay[]
  managers        StoreManager[]
  characteristics StoreCharacteristic[]

  @@unique([name, latitude, longitude])
}

model StoreCharacteristic {
  characteristic Characteristic
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId        String

  @@unique([characteristic, storeId])
  @@index([storeId])
  @@index([characteristic])
}

enum Characteristic {
  SPECIALTY_COFFEE
  DECAFFEINATED_COFFEE
  BAKERY
  DESSERT
  VEGAN
  PET_FRIENDLY
  ROASTERY
  STUDY
  CALM
  QUIET
  TALK
  WIFI
  FAMILY
  FRIENDS
  DATE
  WORK
  MEETING
  OUTDOOR
  PARKING
  DRIVE_THRU
  OUTLET
}

enum DayOfWeek {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
  WEEKDAYS
  WEEKENDS
  EVERYDAY
}

model BusinessDay {
  dayOfWeek DayOfWeek
  openTime  String?   @db.VarChar(5)
  closeTime String?   @db.VarChar(5)
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String

  @@unique([dayOfWeek, storeId])
  @@index([storeId])
}

model Image {
  url     String  @id @db.VarChar(255)
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
  menu    Menu?   @relation(fields: [menuId, storeId], references: [id, storeId], onDelete: Cascade)
  menuId  String?

  @@index([storeId])
  @@index([menuId, storeId])
}

model Menu {
  id          String  @id @default(cuid())
  name        String
  price       Int?
  description String? @db.Text
  store       Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  images      Image[]

  @@unique([id, storeId])
  @@unique([name, storeId])
  @@index([storeId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role
  manages       StoreManager[]
}

enum Role {
  APP_ADMIN
  STORE_MANAGER
  CUSTOMER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StoreManager {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  store   Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
  role    StoreRole

  @@unique([userId, storeId])
  @@index([userId])
  @@index([storeId])
}

enum StoreRole {
  OWNER
  MANAGER
}
